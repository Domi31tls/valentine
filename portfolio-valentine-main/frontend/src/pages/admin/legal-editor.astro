---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout>
  <div class="legal-wysiwyg-page">
    <div class="admin-header">
      <h1>‚úèÔ∏è √âditeur de contenu l√©gal</h1>
      <p class="admin-description">
        √âditez facilement vos mentions l√©gales et colophon avec un √©diteur visuel
      </p>
    </div>

    <div id="legal-wysiwyg-app">
      <!-- Le composant Vue sera mont√© ici -->
    </div>
  </div>
</AdminLayout>

<script>
  import { createApp } from 'vue';
  
  const LegalWYSIWYGApp = {
    template: `
      <div class="legal-editor-app">
        <div class="page-tabs">
          <button 
            @click="currentPage = 'mentions-legales'"
            class="tab-button"
            :class="{ active: currentPage === 'mentions-legales' }"
          >
            üìã Mentions l√©gales
          </button>
          <button 
            @click="currentPage = 'colophon'"
            class="tab-button"
            :class="{ active: currentPage === 'colophon' }"
          >
            üé® Colophon
          </button>
        </div>

        <div v-if="isLoading" class="loading-state">
          <div class="loading-spinner"></div>
          <p>Chargement...</p>
        </div>

        <div v-else-if="error" class="error-state">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h3>Erreur</h3>
          <p>{{ error }}</p>
          <button @click="loadPage" class="retry-button">R√©essayer</button>
        </div>

        <div v-else class="editor-main">
          <div class="editor-header">
            <div class="page-info">
              <h2>{{ pageData.title || 'Sans titre' }}</h2>
              <label class="status-toggle">
                <input v-model="pageData.is_published" @change="markAsChanged" type="checkbox" />
                <span>{{ pageData.is_published ? 'üåê Publi√©' : 'üîí Brouillon' }}</span>
              </label>
            </div>
            
            <div class="editor-actions">
              <a :href="getPreviewUrl()" target="_blank" class="preview-btn">üëÅÔ∏è Pr√©visualiser</a>
              <button @click="savePage" :disabled="!hasChanges || isSaving" class="save-btn" :class="{ saving: isSaving }">
                {{ isSaving ? 'Sauvegarde...' : 'Sauvegarder' }}
              </button>
            </div>
          </div>

          <div class="title-section">
            <input v-model="pageData.title" @input="markAsChanged" type="text" class="title-input" placeholder="Titre de la page" />
          </div>

          <div class="content-section">
            <!-- Rich Text Editor Toolbar -->
            <div class="editor-toolbar">
              <div class="toolbar-group">
                <button @click="formatText('bold')" class="toolbar-btn" :class="{ active: isActive('bold') }" title="Bold (Ctrl+B)">
                  <strong>B</strong>
                </button>
                <button @click="formatText('italic')" class="toolbar-btn" :class="{ active: isActive('italic') }" title="Italic (Ctrl+I)">
                  <em>I</em>
                </button>
                <button @click="formatText('underline')" class="toolbar-btn" :class="{ active: isActive('underline') }" title="Underline (Ctrl+U)">
                  <u>U</u>
                </button>
              </div>
              
              <div class="toolbar-separator"></div>
              
              <div class="toolbar-group">
                <button @click="formatText('h1')" class="toolbar-btn" :class="{ active: isActive('h1') }" title="Heading 1">
                  H1
                </button>
                <button @click="formatText('h2')" class="toolbar-btn" :class="{ active: isActive('h2') }" title="Heading 2">
                  H2
                </button>
                <button @click="formatText('h3')" class="toolbar-btn" :class="{ active: isActive('h3') }" title="Heading 3">
                  H3
                </button>
              </div>
              
              <div class="toolbar-separator"></div>
              
              <div class="toolbar-group">
                <button @click="formatText('insertUnorderedList')" class="toolbar-btn" :class="{ active: isActive('insertUnorderedList') }" title="Bullet List">
                  ‚Ä¢ List
                </button>
                <button @click="formatText('insertOrderedList')" class="toolbar-btn" :class="{ active: isActive('insertOrderedList') }" title="Number List">
                  1. List
                </button>
              </div>
              
              <div class="toolbar-separator"></div>
              
              <div class="toolbar-group">
                <button @click="formatText('createLink')" class="toolbar-btn" title="Add Link">
                  üîó
                </button>
                <button @click="formatText('removeFormat')" class="toolbar-btn" title="Clear Formatting">
                  ‚úÇÔ∏è
                </button>
              </div>
            </div>
            
            <!-- Rich Text Content Editor -->
            <div 
              ref="contentEditor"
              class="content-editor"
              contenteditable="true"
              @input="onContentInput"
              @keydown="onKeydown"
              @blur="markAsChanged"
              v-html="pageData.content"
              data-placeholder="Commencez √† √©crire votre contenu ici..."
            ></div>
          </div>

          <div class="preview-section">
            <h3>üì± Aper√ßu du rendu</h3>
            <div class="content-preview" v-html="pageData.content"></div>
          </div>
        </div>
      </div>
    `,
    
    data() {
      return {
        currentPage: 'mentions-legales',
        isLoading: true,
        error: null,
        isSaving: false,
        hasChanges: false,
        pageData: { title: '', content: '', is_published: true }
      };
    },
    
    methods: {
      async loadPage() {
        try {
          this.isLoading = true;
          this.error = null;
          
          const response = await fetch(`/api/legal/${this.currentPage}`, { credentials: 'include' });
          
          if (response.ok) {
            const data = await response.json();
            if (data.success && data.data) {
              this.pageData = data.data;
            }
          } else if (response.status === 404) {
            this.pageData = {
              title: this.currentPage === 'mentions-legales' ? 'Mentions L√©gales' : 'Colophon',
              content: this.getDefaultContent(),
              is_published: true
            };
          } else {
            throw new Error(`HTTP ${response.status}`);
          }
          
          this.hasChanges = false;
        } catch (err) {
          this.error = err.message;
        } finally {
          this.isLoading = false;
        }
      },
      
      async savePage() {
        try {
          this.isSaving = true;
          
          const response = await fetch(`/api/legal/${this.currentPage}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify(this.pageData)
          });
          
          if (response.ok) {
            this.hasChanges = false;
            this.showNotification('‚úÖ Sauvegard√© !');
          } else {
            throw new Error('Erreur de sauvegarde');
          }
        } catch (err) {
          alert(`Erreur : ${err.message}`);
        } finally {
          this.isSaving = false;
        }
      },
      
      markAsChanged() {
        this.hasChanges = true;
      },
      
      getPreviewUrl() {
        return `/${this.currentPage}`;
      },
      
      getDefaultContent() {
        if (this.currentPage === 'mentions-legales') {
          return `<h2>√âditeur du site</h2><p><strong>Valentine Arnaly</strong><br>Photographe professionnel</p>`;
        } else {
          return `<h2>Technologies utilis√©es</h2><p>Astro + Vue.js + TypeScript</p>`;
        }
      },
      
      // Rich Text Editor Methods
      formatText(command) {
        this.$refs.contentEditor?.focus();
        
        if (command === 'h1' || command === 'h2' || command === 'h3') {
          document.execCommand('formatBlock', false, command);
        } else if (command === 'createLink') {
          const url = prompt('Entrez l\'URL du lien:');
          if (url) {
            document.execCommand('createLink', false, url);
          }
        } else {
          document.execCommand(command, false, null);
        }
        
        this.onContentInput();
      },
      
      isActive(command) {
        try {
          if (command === 'h1' || command === 'h2' || command === 'h3') {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
              const range = selection.getRangeAt(0);
              let element = range.commonAncestorContainer;
              
              if (element.nodeType === Node.TEXT_NODE) {
                element = element.parentElement;
              }
              
              while (element && element !== this.$refs.contentEditor) {
                if (element.tagName && element.tagName.toLowerCase() === command) {
                  return true;
                }
                element = element.parentElement;
              }
            }
            return false;
          }
          
          return document.queryCommandState(command);
        } catch (e) {
          return false;
        }
      },
      
      onContentInput() {
        if (this.$refs.contentEditor) {
          this.pageData.content = this.$refs.contentEditor.innerHTML;
          this.markAsChanged();
        }
      },
      
      onKeydown(e) {
        // Handle keyboard shortcuts
        if (e.ctrlKey || e.metaKey) {
          switch (e.key.toLowerCase()) {
            case 'b':
              e.preventDefault();
              this.formatText('bold');
              break;
            case 'i':
              e.preventDefault();
              this.formatText('italic');
              break;
            case 'u':
              e.preventDefault();
              this.formatText('underline');
              break;
            case 's':
              e.preventDefault();
              if (!this.isSaving) {
                this.savePage();
              }
              break;
          }
        }
        
        // Handle Enter key for better paragraph handling
        if (e.key === 'Enter' && !e.shiftKey) {
          const selection = window.getSelection();
          if (selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            let element = range.commonAncestorContainer;
            
            if (element.nodeType === Node.TEXT_NODE) {
              element = element.parentElement;
            }
            
            // If we're in a heading, create a paragraph instead of another heading
            if (element && (element.tagName === 'H1' || element.tagName === 'H2' || element.tagName === 'H3')) {
              e.preventDefault();
              document.execCommand('insertHTML', false, '<br><p><br></p>');
              
              // Move cursor to the new paragraph
              const newParagraph = this.$refs.contentEditor.lastElementChild;
              if (newParagraph) {
                const newRange = document.createRange();
                newRange.setStart(newParagraph, 0);
                newRange.collapse(true);
                selection.removeAllRanges();
                selection.addRange(newRange);
              }
            }
          }
        }
      },
      
      showNotification(message) {
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.cssText = 'position:fixed;top:20px;right:20px;background:#065f46;color:white;padding:1rem;border-radius:8px;z-index:1000;';
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
      }
    },
    
    watch: {
      currentPage() { this.loadPage(); }
    },
    
    mounted() {
      // R√©cup√©rer le param√®tre de page depuis l'URL
      const urlParams = new URLSearchParams(window.location.search);
      const pageParam = urlParams.get('page');
      if (pageParam && ['mentions-legales', 'colophon'].includes(pageParam)) {
        this.currentPage = pageParam;
      }
      
      this.loadPage();
    }
  };
  
  createApp(LegalWYSIWYGApp).mount('#legal-wysiwyg-app');
</script>

<style lang="scss">
@import '../../styles/variables.scss';

.legal-wysiwyg-page {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.admin-header {
  margin-bottom: 3rem;
  text-align: center;
  
  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: $color-gray-dark;
    margin: 0 0 0.5rem 0;
  }
  
  .admin-description {
    color: $color-gray-medium;
    font-size: 1.1rem;
    margin: 0;
  }
}

.legal-editor-app {
  .page-tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 2rem;
    border-bottom: 1px solid $color-gray-light;
    
    .tab-button {
      background: none;
      border: none;
      padding: 1rem 1.5rem;
      font-size: 1rem;
      font-weight: 500;
      color: $color-gray-medium;
      cursor: pointer;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
      
      &:hover {
        color: $color-gray-dark;
        background: lighten($color-gray-light, 4%);
      }
      
      &.active {
        color: $color-gray-dark;
        border-bottom-color: $color-gray-dark;
      }
    }
  }
}

.loading-state, .error-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 4rem 2rem;
  text-align: center;
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    margin-bottom: 1rem;
    border: 3px solid $color-gray-light;
    border-top: 3px solid $color-gray-dark;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .retry-button {
    background: $color-gray-dark;
    color: $color-white;
    border: none;
    border-radius: 8px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    cursor: pointer;
    
    &:hover {
      background: lighten($color-gray-dark, 10%);
    }
  }
}

.editor-main {
  .editor-header {
    background: $color-white;
    border: 1px solid $color-gray-light;
    border-radius: 12px 12px 0 0;
    padding: 1.5rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    
    .page-info h2 {
      margin: 0 0 0.5rem 0;
      color: $color-gray-dark;
      font-size: 1.5rem;
    }
    
    .status-toggle {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      
      span {
        font-size: 0.9rem;
        color: $color-gray-medium;
      }
    }
    
    .editor-actions {
      display: flex;
      gap: 1rem;
      
      .preview-btn, .save-btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s ease;
      }
      
      .preview-btn {
        background: lighten($color-gray-light, 3%);
        color: $color-gray-dark;
        border: 1px solid $color-gray-light;
        
        &:hover {
          background: $color-gray-light;
        }
      }
      
      .save-btn {
        background: $color-gray-dark;
        color: $color-white;
        border: none;
        
        &:hover:not(:disabled) {
          background: lighten($color-gray-dark, 10%);
        }
        
        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        
        &.saving {
          background: #f59e0b;
        }
      }
    }
  }
  
  .title-section {
    background: $color-white;
    border: 1px solid $color-gray-light;
    border-top: none;
    padding: 1.5rem 2rem;
    
    .title-input {
      width: 100%;
      border: none;
      outline: none;
      font-size: 2rem;
      font-weight: 600;
      color: $color-gray-dark;
      background: transparent;
      
      &::placeholder {
        color: $color-gray-light;
      }
    }
  }
  
  .content-section {
    background: $color-white;
    border: 1px solid $color-gray-light;
    border-top: none;
    
    .editor-toolbar {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 1rem 1.5rem;
      border-bottom: 1px solid $color-gray-light;
      background: lighten($color-gray-light, 5%);
      flex-wrap: wrap;
      
      .toolbar-group {
        display: flex;
        align-items: center;
        gap: 0.25rem;
      }
      
      .toolbar-btn {
        background: $color-white;
        border: 1px solid $color-gray-light;
        padding: 0.5rem 0.75rem;
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        color: $color-gray-dark;
        
        &:hover {
          background: $color-gray-light;
          border-color: $color-gray-medium;
        }
        
        &.active {
          background: $color-gray-dark;
          color: $color-white;
          border-color: $color-gray-dark;
        }
      }
      
      .toolbar-separator {
        width: 1px;
        height: 20px;
        background: $color-gray-light;
        margin: 0 0.5rem;
      }
    }
    
    .content-editor {
      min-height: 500px;
      padding: 2rem;
      outline: none;
      font-size: 1rem;
      line-height: 1.7;
      color: $color-gray-dark;
      font-family: inherit;
      overflow-y: auto;
      
      &:empty::before {
        content: attr(data-placeholder);
        color: $color-gray-medium;
        pointer-events: none;
        position: absolute;
      }
      
      &:focus {
        background: rgba(255, 255, 255, 0.5);
      }
      
      // Rich text content styling
      h1, h2, h3, h4, h5, h6 {
        color: $color-gray-dark;
        margin: 1.5rem 0 1rem 0;
        font-weight: 600;
        
        &:first-child {
          margin-top: 0;
        }
      }
      
      h1 { 
        font-size: 2.5rem; 
        border-bottom: 3px solid $color-gray-light;
        padding-bottom: 0.5rem;
      }
      
      h2 { 
        font-size: 2rem; 
        border-bottom: 2px solid $color-gray-light;
        padding-bottom: 0.5rem;
      }
      
      h3 { 
        font-size: 1.5rem; 
      }
      
      p {
        margin: 1rem 0;
        
        &:first-child {
          margin-top: 0;
        }
        
        &:last-child {
          margin-bottom: 0;
        }
      }
      
      ul, ol {
        margin: 1rem 0;
        padding-left: 2rem;
        
        li {
          margin: 0.5rem 0;
        }
      }
      
      blockquote {
        margin: 1.5rem 0;
        padding: 1rem 1.5rem;
        border-left: 4px solid $color-gray-light;
        background: lighten($color-gray-light, 4%);
        font-style: italic;
      }
      
      strong {
        font-weight: 600;
      }
      
      a {
        color: #3b82f6;
        text-decoration: underline;
        
        &:hover {
          text-decoration: none;
        }
      }
      
      // Substack-style focus effect
      &:focus {
        box-shadow: inset 0 0 0 1px rgba(59, 130, 246, 0.2);
      }
    }
  }
  
  .preview-section {
    background: $color-white;
    border: 1px solid $color-gray-light;
    border-top: none;
    border-radius: 0 0 12px 12px;
    padding: 2rem;
    
    h3 {
      color: $color-gray-dark;
      margin: 0 0 1.5rem 0;
      font-size: 1.3rem;
    }
    
    .content-preview {
      background: lighten($color-gray-light, 4%);
      border: 1px solid $color-gray-light;
      border-radius: 8px;
      padding: 2rem;
      line-height: 1.7;
      
      h1, h2, h3, h4, h5, h6 {
        color: $color-gray-dark;
        margin: 1.5rem 0 1rem 0;
        
        &:first-child {
          margin-top: 0;
        }
      }
      
      h2 {
        font-size: 1.8rem;
        border-bottom: 2px solid $color-gray-light;
        padding-bottom: 0.5rem;
      }
      
      p {
        margin: 1rem 0;
        color: $color-gray-medium;
      }
      
      strong {
        color: $color-gray-dark;
        font-weight: 600;
      }
    }
  }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .legal-wysiwyg-page {
    padding: 1rem;
  }
  
  .editor-main .editor-header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
}
</style>
